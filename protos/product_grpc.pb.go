// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductClient is the client API for Product service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductClient interface {
	CreateProduct(ctx context.Context, in *ProductType, opts ...grpc.CallOption) (*ProductResponse, error)
	UpdateProductByID(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	DeleteProductByID(ctx context.Context, in *ProductIDRequest, opts ...grpc.CallOption) (*ProductResponse, error)
	GetProductByID(ctx context.Context, in *ProductIDRequest, opts ...grpc.CallOption) (*ProductType, error)
	GetAllProductsBy(ctx context.Context, in *ProductGetAllByRequest, opts ...grpc.CallOption) (*ProductsResponse, error)
}

type productClient struct {
	cc grpc.ClientConnInterface
}

func NewProductClient(cc grpc.ClientConnInterface) ProductClient {
	return &productClient{cc}
}

func (c *productClient) CreateProduct(ctx context.Context, in *ProductType, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/grpcsample.Product/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) UpdateProductByID(ctx context.Context, in *ProductUpdateRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/grpcsample.Product/UpdateProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) DeleteProductByID(ctx context.Context, in *ProductIDRequest, opts ...grpc.CallOption) (*ProductResponse, error) {
	out := new(ProductResponse)
	err := c.cc.Invoke(ctx, "/grpcsample.Product/DeleteProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetProductByID(ctx context.Context, in *ProductIDRequest, opts ...grpc.CallOption) (*ProductType, error) {
	out := new(ProductType)
	err := c.cc.Invoke(ctx, "/grpcsample.Product/GetProductByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productClient) GetAllProductsBy(ctx context.Context, in *ProductGetAllByRequest, opts ...grpc.CallOption) (*ProductsResponse, error) {
	out := new(ProductsResponse)
	err := c.cc.Invoke(ctx, "/grpcsample.Product/GetAllProductsBy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductServer is the server API for Product service.
// All implementations must embed UnimplementedProductServer
// for forward compatibility
type ProductServer interface {
	CreateProduct(context.Context, *ProductType) (*ProductResponse, error)
	UpdateProductByID(context.Context, *ProductUpdateRequest) (*ProductResponse, error)
	DeleteProductByID(context.Context, *ProductIDRequest) (*ProductResponse, error)
	GetProductByID(context.Context, *ProductIDRequest) (*ProductType, error)
	GetAllProductsBy(context.Context, *ProductGetAllByRequest) (*ProductsResponse, error)
	mustEmbedUnimplementedProductServer()
}

// UnimplementedProductServer must be embedded to have forward compatible implementations.
type UnimplementedProductServer struct {
}

func (UnimplementedProductServer) CreateProduct(context.Context, *ProductType) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductServer) UpdateProductByID(context.Context, *ProductUpdateRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductByID not implemented")
}
func (UnimplementedProductServer) DeleteProductByID(context.Context, *ProductIDRequest) (*ProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductByID not implemented")
}
func (UnimplementedProductServer) GetProductByID(context.Context, *ProductIDRequest) (*ProductType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductByID not implemented")
}
func (UnimplementedProductServer) GetAllProductsBy(context.Context, *ProductGetAllByRequest) (*ProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProductsBy not implemented")
}
func (UnimplementedProductServer) mustEmbedUnimplementedProductServer() {}

// UnsafeProductServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductServer will
// result in compilation errors.
type UnsafeProductServer interface {
	mustEmbedUnimplementedProductServer()
}

func RegisterProductServer(s grpc.ServiceRegistrar, srv ProductServer) {
	s.RegisterService(&Product_ServiceDesc, srv)
}

func _Product_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.Product/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).CreateProduct(ctx, req.(*ProductType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_UpdateProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).UpdateProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.Product/UpdateProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).UpdateProductByID(ctx, req.(*ProductUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_DeleteProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).DeleteProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.Product/DeleteProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).DeleteProductByID(ctx, req.(*ProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetProductByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetProductByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.Product/GetProductByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetProductByID(ctx, req.(*ProductIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Product_GetAllProductsBy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductGetAllByRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductServer).GetAllProductsBy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcsample.Product/GetAllProductsBy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductServer).GetAllProductsBy(ctx, req.(*ProductGetAllByRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Product_ServiceDesc is the grpc.ServiceDesc for Product service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Product_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcsample.Product",
	HandlerType: (*ProductServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _Product_CreateProduct_Handler,
		},
		{
			MethodName: "UpdateProductByID",
			Handler:    _Product_UpdateProductByID_Handler,
		},
		{
			MethodName: "DeleteProductByID",
			Handler:    _Product_DeleteProductByID_Handler,
		},
		{
			MethodName: "GetProductByID",
			Handler:    _Product_GetProductByID_Handler,
		},
		{
			MethodName: "GetAllProductsBy",
			Handler:    _Product_GetAllProductsBy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpcsample/protos/product.proto",
}
