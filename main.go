// Author : readyGo "JitenP@Outlook.Com"
// This code is generated by readyGo. You are free to make amendments as and where required
package main

import (
	"net"
	"os"
	"grpcsample/database"
	"grpcsample/handlers"
	pb "grpcsample/protos"
	"github.com/golang/glog"
	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

var (
	// DBConnection is to store database connection information
	DBConnection =  "root:admin@tcp(127.0.0.1:3306)/demo?charset=utf8mb4&parseTime=True&loc=Local"
	// DBName is to store database name
	DBName       =  "demo"
)

func main() {
glog.Info("Application grpcsample has started")
    if os.Getenv("DB_CONNECTION") != "" {
		DBConnection = os.Getenv("DB_CONNECTION")
	}
	if os.Getenv("DB_NAME") != "" {
		DBName = os.Getenv("DB_NAME")
	}
session, err := database.GetConnection(DBConnection, DBName)
	//defer session.Disconnect(context.TODO())

	if err != nil {
		glog.Fatal("mysql database is not connected", err)
	}
	
	lis, err := net.Listen("tcp", ":50058")
	if err != nil {
		glog.Fatalf("failed to listen: %v", err)
	}
	server := grpc.NewServer()
     product := new(handlers.Product)
	 product.IProduct = &database.ProductDB{DB: session}
	 //productpb.RegisterProductServer(server, product)	
	 pb.RegisterProductServer(server, product)
	 // Register reflection service on gRPC server.
	reflection.Register(server)
	if err := server.Serve(lis); err != nil {
		glog.Fatalf("failed to serve: %v", err)
	}
}